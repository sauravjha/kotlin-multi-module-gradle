pipeline {
    agent any

    environment {
        GIT_COMMIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true)
    }

    stages {
        stage('Update pipeline label') {
            steps {
                script {
                    currentBuild.displayName = "$GIT_COMMIT_SHA"
                }
            }
        }
        stage('Gradle Clean') {
            steps {
                echo "This is building stage"
                sh './gradlew clean'
            }
        }
        stage('Build') {
            steps {
                echo "This is building stage"
                sh './gradlew build'
            }
        }
        stage('Test') {
            parallel {
                stage("Unit Test") {
                    steps {
                        echo "This is testing stage"
                        sh './gradlew unitTest'
                    }
                    post {
                        always {
                            junit '**/build/reports/tests/unitTest/index.html'
                        }
                    }
                }
                stage("Integration Test") {
                    steps {
                        echo "This is testing stage"
                        sh './gradlew integrationTest'
                    }
                }
            }
        }
        stage("Deployment") {
            parallel {
                stage('Deploy to ci') {
                    stages {
                        stage("deploy baseinfra") {
                            steps {
                                echo "Deploy Baseinfra"
                            }
                        }
                        stage("deploy service") {
                            steps {
                                echo "Deploy Service"
                            }
                        }
                    }
                }
                stage('Deploy to ci2') {
                    stages {
                        stage("deploy baseinfra") {
                            steps {
                                echo "Deploy Baseinfra"
                            }
                        }
                        stage("deploy service") {
                            steps {
                                echo "Deploy Service"
                            }
                        }
                    }
                }
            }
        }
        stage('Approval to Deploy to Sit') {
            // no agent, so executors are not used up when waiting for approvals
            agent none
            steps {
                script {
                    def deploymentDelay = input id: 'Deploy', message: 'Deploy to production?', submitter: 'rkivisto,admin', parameters: [choice(choices: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24'], description: 'Hours to delay deployment?', name: 'deploymentDelay')]
                    sleep time: deploymentDelay.toInteger(), unit: 'HOURS'
                }
            }
        }
        stage('Deploy to Sit') {
            stages {
                stage("deploy baseinfra") {
                    steps {
                        echo "Deploy Baseinfra"
                    }
                }
                stage("deploy service") {
                    steps {
                        echo "Deploy Service"
                    }
                }
            }
        }
        stage('Approval to Deploy to Prod') {
            // no agent, so executors are not used up when waiting for approvals
            agent none
            steps {
                script {
                    def deploymentDelay = input id: 'Deploy', message: 'Deploy to production?', submitter: 'rkivisto,admin', parameters: [choice(choices: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24'], description: 'Hours to delay deployment?', name: 'deploymentDelay')]
                    sleep time: deploymentDelay.toInteger(), unit: 'HOURS'
                }
            }
        }
        stage('Deploy to Prod') {
            stages {
                stage("deploy baseinfra") {
                    steps {
                        echo "Deploy Baseinfra"
                    }
                }
                stage("deploy service") {
                    steps {
                        echo "Deploy Service"
                    }
                }
            }
        }

    }
}